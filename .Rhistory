yarmouth <- subset(climate, climate$loc == "Y")
dwtest(yarmouth$ave ~ yarmouth$year)
install.packages("lmtest")
library("lmtest")
dwtest(yarmouth$ave ~ yarmouth$year)
n <- subset(climate, climate$reg == 1)
t.test(n$ave)
n <- subset(climate, climate$reg == 1)
t.test(n$ave)
t.test(n$ave, alternative = "greater")
View(yarmouth)
library("devtools")
?install_github
install_github("rSUB","Chris1221")
?rsub
library("rSUB")
?rsub
load("~/Downloads/Spectra2014.RData")
View(Spectra2014)
Spectra2014[Spectra2014$logchl == 0,]
Spectra2014[Spectra2014$logchl == 2.5,]
min(Spectra2014$logchl)
max(Spectra2014$logchl)
quantile(Spectra2014$logchl)
?dunn.test
install.packages("dygraphs")
library("dygraphs")
library(dygraphs)
lungDeaths <- cbind(mdeaths, fdeaths)
dygraph(lungDeaths)
fix(lungDeaths)
y <- data.frame()
y <- c(1998, NULL, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, NULL, NULL, MDG)
y <- c(1998, NULL, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, NULL, NULL, "MDG")
y
y <- as.character(y)
y
u <- data.frame(y)
View(u)
u$data <- c(150, 133, 150, 196, 212, 237, 299, 300, 312, 269, 38)
View(u)
dygraph(u)
lungDeaths <- cbind(mdeaths, fdeaths)
lungDeaths
mdeaths
str(mdeaths)
q <- ts(u)
dygraph(q)
View(u)
row.names(u) <- u$y
View(u)
u[11,] <- NULL
i <- data.frame()
i$data <- c(133, 150, 196, 212, 237, 299, 300, 312, 269)
i$data <- c(133, 150, 196, 212, 237, 299, 300, 312, 269)
o <- c(133, 150, 196, 212, 237, 299, 300, 312, 269)
i <- data.frame(o)
View(i)
row.names(i) <- u$y
row.names(i) <- c(2002,2003,2004,2005,2006,2007,2008,2009,2010)
View(i)
b <- ts(i)
dygraog(y)
dygraph(i)
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=12)
myts <- ts(o, start=c(2009, 1), end=c(2014, 12), frequency=12)
ts(o, start = 2002, end = 2010, frequency = 1)
o <- data.frame(o)
o$two <- 38
ts(o, start = 2002, end = 2010, frequency = 1)
d <- ts(o, start = 2002, end = 2010, frequency = 1)
dygraphs(d)
dygraph(d)
length(order.by(d))
lunchDe
lungDeaths
d
?dygraph
install.packages("xts")
s <- as.xts(d)
?xts
library("xts")
?xts
s <- as.xts(d)
?xts
?index
?xts
xts(x = i$o, order.by = o$row.names, frequency = 1)
xts(x = i$o, order.by = o$row.names, frequency = 1)
p <- row.names(i)
p <- as.Date(i)
p <- seq(as.Date("2002/1/1"), as.Date("2010"), "years")
p <- seq(as.Date("2002/1/1"), as.Date("2010/1/1"), "years")
xts(x = i$o, order.by = p, frequency = 1)
data <- xts(x = i$o, order.by = p, frequency = 1)
d
data2 <- xts(x = d$two, order.by = p, frequency = 1)
data2 <- xts(x = 32, order.by = p, frequency = 1)
data2 <- xts(x = o$two, order.by = p, frequency = 1)
data2
out <- cbind(data,data2)
dygraph(out)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target")
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death")
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births")
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>%
dySeries("o", label = "Reality") %>% dySeries("two", label = "Goal") %>% dyRangeSelector(height = 20)
dySeries("o", label = "Reality") %>% dySeries(..1, label = "Goal") %>% dyRangeSelector(height = 20)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries(..1, label = "Reality") %>% dySeries(..2, label = "Goal") %>% dyRangeSelector(height = 20)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("o", label = "Reality") %>% dySeries(..2, label = "Goal") %>% dyRangeSelector(height = 20)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("o", label = "Reality") %>% dySeries(..2, label = "Goal") %>% dyRangeSelector(height = 20)
out
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyRangeSelector(height = 20)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyRangeSelector(height = 40)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE) %>% dyRangeSelector(height = 40)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, stepPlot= TRUE) %>% dyRangeSelector(height = 40)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE) %>% dyRangeSelector(height = 40)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 100) %>% dyRangeSelector(height = 40)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 10) %>% dyRangeSelector(height = 40)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 10, colors=c("red", "green")) %>% dyRangeSelector(height = 40)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 10, colors=c("red", "green"), rightGap= 10) %>% dyRangeSelector(height = 40)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 10, colors=c("red", "green"), drawGrid= FALSE) %>% dyRangeSelector(height = 40)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 10, colors=c("red", "green"), drawGrid= TRUE) %>% dyRangeSelector(height = 40)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 10, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= FALSE) %>% dyRangeSelector(height = 40)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 10, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE) %>% dyRangeSelector(height = 40)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 10, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE) %>% dyRangeSelector(height = 40)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE) %>% dyRangeSelector(height = 40)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE, fillAlpha=c(1.0, 0.5))
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE, stepPlot=)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE, stepPlot= TRUE)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE, animatedZooms= TRUE)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE)
o
o$o
R code if I look back and want to redo it, ignore this
#load packages
require(xts); require(dygraphs)
#set up dataframe
data <- data.frame(Reality = c(133,150,196,212,237,299,300,312,269), Goal = 32)
#set up date objects
p <- seq(as.Date("2002/1/1"), as.Date("2010/1/1"), "years")
#make xts objects
xts1 <- xts(x = data$Reality, order.by = p, frequency = 1)
xts2 <- xts(x = data$Goal, order.by = p, frequency = 1)
#join
out <- cbind(xts1,xts2)
#graph
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE)
p <- seq(as.Date("2002/0/0"), as.Date("2010/0/0"), "years")
p <- seq(as.Date("2002"), as.Date("2010/0/0"), "years")
R code if I look back and want to redo it, ignore this
#load packages
require(xts); require(dygraphs)
#set up dataframe
data <- data.frame(Reality = c(133,150,196,212,237,299,300,312,269), Goal = 32)
#set up date objects
p <- seq(as.Date("2002/1/1"), as.Date("2010/1/1"), "years")
#make xts objects
xts1 <- xts(x = data$Reality, order.by = p, frequency = 1)
xts2 <- xts(x = data$Goal, order.by = p, frequency = 1)
#join
out <- cbind(xts1,xts2)
#graph
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE) %>% dyAxis(rangePad= 10)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE) %>% dyAxis(rangePad= 10)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE) %>% dyAxis(name='x', rangePad= 10)
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE) %>% dyAxis(name='x', valueFormatter=)
?dyAxis
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE) %>% dyAxis(name='x', valueFormatter= Date(out))
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE) %>% dyAxis(name='x', valueFormatter= as.Date(out))
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE) %>% dyAxis(name='x', valueFormatter= as.Date(out$..2))
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE) %>% dyAxis(name='x', valueFormatter= as.Date(out$"..2"))
dygraph(out, main = "Maternal mortality ratios by year of death: 2002-2010 and the 2015 MDG target", xlab= "Year of death", ylab = "Maternal deaths per 100 000 live births") %>% dySeries("..1", label = "Reality") %>% dySeries("..2", label = "Goal") %>% dyOptions(stackedGraph = TRUE, drawPoints= TRUE, pointSize= 6, colors=c("red", "green"), drawGrid= TRUE, drawYAxis= TRUE) %>% dyAxis(name='x', valueFormatte) %>% dyAxis(name='x', ticker=c("2002","2003","2004","2005","2006","2007","2008", "2009", "2010"))
updateR()
update()
for(i in 1:5) {}
for(i in 1:5) {
if(i<2){
a <- i
} else {
a <- i-1
}
}
X <- list()
a <- list()
for(i in 1:5) {
if(i<2){
a <- i
} else {
a <- i-1
}
X[i] <- a
}
X
library(ggplot2)
library("ggplot2")
install.packages("ggplot2")
library(ggplot2)
?aes
install.packages("ggplot2")
library("ggplot2")
?list
n_people <- 10
samp <- vector()
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_1, ID_2)
View(samp)
samp$missing <- 0
samp$missing <- list(0)
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_1, ID_2)
samp$missing <- vector(0)
samp$missing <- list(0)
samp
samp$missing <- 0
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_1, ID_2)
samp$missing <- 0
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_1, ID_2)
samp$missing <- NA
ID_1 <- paste0("ID_1_", 1:n_people)
ID_2 <- paste0("ID_2_", 1:n_people)
samp <- cbind(ID_1, ID_2)
samp <- as.data.frame(samp)
samp$missing <- 0
View(samp)
var <- data.frame(0, 0, 0, "C")
View(var)
rbind(var, samp)
View(samp)
phen <- cbind(samp$ID_2, samp$ID_1, samp$missing, Z)
Z <- vector(1:10)
Z <- list(1:10)
phen <- cbind(samp$ID_2, samp$ID_1, samp$missing, Z)
phen <- as.data.frame(phen)
rbin(var, phen)
rbind(var, phen)
View(var)
View(phen)
View(samp)
phen <- cbind(samp$ID_2, samp$ID_1, samp$missing, Z)
phen <- cbind(samp$ID_2, samp$ID_1, samp$missing, as.vector(Z)
)
phen <- cbind(samp$ID_2, samp$ID_1, samp$missing, as.vector(Z))
View(phen)
View(phen)
phen <- cbind(samp$ID_2, samp$ID_1, samp$missing
)
phen <- as.data.frame(cbind(samp$ID_2, samp$ID_1, samp$missing))
View(phen)
samp <- as.data.frame(samp)
phen <- as.data.frame(cbind(samp$ID_2, samp$ID_1, samp$missing))
View(phen)
samp
samp$ID_2
samp$Z <- Z
View(samp)
Z <- 1:10
samp$Z <- Z
View(samp)
typeof(Z)
Z <- vector(Z)
Z <- vector()
Z <- 1:10
typeof(Z)
Z <- vector()
typeof(Z)
View(samp)
rbind(var, samp)
colnames(var)
colnames(var) <- colnames(samp)
rbind(var,samp)
Z <- 1:10
rbind(var,samp)
samp$Z <- Z
rbind(var,samp)
Z
asmp
samp
samp$Z <- as.character(samp$Z)
rbind(var,samp)
colnames(samp) <- paste0("V",1:ncol(samp))
samp
install.packages("rvest")
library(rvest)
player <- html("http://www.whoscored.com/Regions/31/Tournaments/95/Seasons/5713/Stages/12121/PlayerStatistics/Brazil-Brasileiro-2015")
player %>% html_node("strong span")
player %>% html_node("strong span") %>% html_text()
player
player %>% html_node("strong span") %>% html_table()
player %>% html_table()
player %>% .[[2]] %>% html_table()
player %>% .[[2]] %>% html_nodes("table")
player %>% html_nodes("table")
player
r <- NULL
is.null(r)
stop(if(is.null(r)))
stop(if(is.null(r))
)
?stop
stop()
stop(is.null(r))
stop(is.null(r))
if(is.null(r)){}
if(is.null(r)){
stop("Please provide input")
}
scale <- function(vector = NULL, lower_bound = NULL, upper_bound = NULL){
if(is.null(vector)){
stop("Please provide input")
} else if(is.null(lower_bound)){
stop("Please provide lower bound")
} else if(is.null(upper_bound)){
stop("Please provide upper bound")
}
min <- min(vector)
max <- max(vector)
a <- lower_bound
b <- upper_bound
new <- lapply(vector, function(x) (b-a)(x-min)/(max-min) + a)
return(new)
}
r <- c(1,2,3,4,5,6,7,8,9,10)
scale(r, -1, 1)
min <- 1
max <- 10
a <- 01
a <- -1
b <- 1
new <- lapply(r, function(x) (b-a)(x-min)/(max-min) + a)
new <- lapply(vector, function(x) ((b-a)(x-min)/(max-min)) + a)
new <- lapply(vector, function(x) ((b-a)(x-min)/(max-min)))
new <- lapply(vector, function(x) x-min
)
new <- lapply(r, function(x) x-min)
lapply(r, function(x) x-min)
lapply(r, function(x) (b-a)(x-min))
lapply(r, function(x) (b-a)*(x-min))
lapply(r, function(x) (b-a)*(x-min)/(max-min))
lapply(r, function(x) (b-a)*(x-min)/(max-min) + a)
scale <- function(vector = NULL, lower_bound = NULL, upper_bound = NULL){
if(is.null(vector)){
stop("Please provide input")
} else if(is.null(lower_bound)){
stop("Please provide lower bound")
} else if(is.null(upper_bound)){
stop("Please provide upper bound")
}
min <- min(vector)
max <- max(vector)
a <- lower_bound
b <- upper_bound
new <- lapply(vector, function(x) ((b-a)*(x-min)/(max-min)) + a)
return(new)
}
scale(r, -1, 1)
scale(r, 10, 100)
unlist(scale(r, -1, 1))
scale <- function(vector = NULL, lower_bound = NULL, upper_bound = NULL){
if(is.null(vector)){
stop("Please provide input")
} else if(is.null(lower_bound)){
stop("Please provide lower bound")
} else if(is.null(upper_bound)){
stop("Please provide upper bound")
}
min <- min(vector)
max <- max(vector)
a <- lower_bound
b <- upper_bound
new <- lapply(vector, function(x) ((b-a)*(x-min)/(max-min)) + a)
return(unlist(new))
}
scale(r, -1, 1)
scale(r, 10, 100)
sys.time
ptm <- proc.time
scale(r, -1, 1)
proc.time() - ptm
ptm <- proc.time()
scale(r, -1, 1)
proc.time() - ptm
r <- runif(10000)
ptm <- proc.time()
scale(r, -1, 1)
proc.time() - ptm
r <- runif(1000000)
ptm <- proc.time()
scale(r, -1, 1)
proc.time() - ptm
maf <- read.table("Desktop/results_maf.txt", h = T)
View(maf)
library(dplyr)
library(tidyr)
maf %>% filter(maf == 0)
maf %>% filter(maf == 0 & n = 0)
maf %>% filter(maf == 0 & n == 0)
maf %>% filter(maf == 0 & n == 0) -> r
View(r)
library(ggplot2)
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
library("dplyr")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("LDheatmap", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
%>%
library("magrittr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
r <- read.table("Desktop/ld2.ld")
r <- as.matrix(r)
LDheatmap(r)
r <- read.table("Desktop/ld2.ld")
r <- as.matrix(r)
LDheatmap(r)
r <- read.table("Desktop/ld3.ld")
r <- as.matrix(r)
LDheatmap(r)
r2 <- read.table("Desktop/ld4.ld")
r2 <- read.table("Downloads/hapmap-ceu-by-chr/ld4.ld")
r2 <- as.matrix(r2)
LDheatmap(r2)
LDheatmap(r)
LDheatmap(r)
r3 <- read.table("Desktop/ld3.ld")
r3 <- as.matrix(r3)
LDheatmap(r3)
LDheatmap(r)
?LDheatmap
LDheatmap(r)
LDheatmap(r3)
q <- read.table("Desktop/maf_list.txt")
q
View(q)
library(car)
install.packages("car")
library(car)
Anova(lm(beta ~ cat, q))
lm(beta ~ cat, q)
q <- read.table("Desktop/maf_list.txt", h = T)
lm(beta ~ cat, q)
Anova(lm(beta ~ cat, q))
Anova(lm(beta ~ all_maf, q))
Anova(lm(beta ~ cat, q))
results <- read.table("Desktop/results.txt", h = T)
View(results)
results %>% filter(n == 0) %>% t.test(S_TP, A_TP)
results %>% filter(n == 0) %>% t.test(S_TP, A_TP, data = .)
results %>% filter(n == 0) %>% t.test(.$S_TP, .$A_TP)
results %>% filter(n == 0) %>% t.test(.$S_TP, .$A_TP, paired = T)
results %>% filter(n == 0) -> re2; t.test(re2$S_TP, re2$A_TP, paired = T)
results %>% filter(n == 10000) -> re2; t.test(re2$S_TP, re2$A_TP, paired = T)
results %>% filter(n == 10000) -> re2; t.test(re2$S_TP, re2$A_TP, paired = T, var.equal = T)
results %>% filter(n == 10000) -> re2; t.test(re2$S_TP, re2$A_TP, paired = T, var.equal = F)
?t.test
a <- a
a <- "a"
b <- "b"
a > b
b > a
a <- "("
b > a
a <- character
a <- 112
a
a <- "abc"
a[2]
typeof(a)
a <- "abc"
typeof(a)
a <- 'abc'
typeof(a)
install.packages("knitr")
library(knitr)
**coR-ge**: Investigation of Stratefied False Disovery Rate
**coR-ge**: Investigation of Stratefied False Disovery Rate in Environments of Complex Correlation
========================================================
author:
date:
First Slide
========================================================
For more details on authoring R presentations click the
**Help** button on the toolbar.
- Bullet 1
- Bullet 2
- Bullet 3
Slide With Code
========================================================
```{r}
summary(cars)
```
Slide With Plot
========================================================
```{r, echo=FALSE}
plot(cars)
```
<img src="pres-figure/flow.png" alt="Logic Flow" style="width: 600px;"/>
library(plotly)
set_credentials_file("ChrisCole", "n9llqfgs43")
setwd("Documents/CAMH_meeting_2015/")
r <- read.table("data/results_ld_all.txt", h = T)
p <- ggplot(r, aes(x = factor(n_gene), y = strat_fp - agg_strat_fp)) + geom_boxplot()
p
py <- plotly()
py$ggplotly(p)
